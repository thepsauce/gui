glob = 32

test = function {
	local a = file("button.prop")
	if exists(a) {
		print(name(a), " exists:\n")
		print(a, "\n")
	} else {
		print(name(a), " does not exist\n")
	}

	print("Init\n")

	local i = 0
	while !(i == 10) {
		i = sum(i, 1)
		print(i, "\n")
	}

	; "Hello\n" is stored static, dup has to be used
	to modify it ;
	local text = dup("Hello\n")
	insert(text, "What is up?\n")
	print(text)

	local t = text
	insert(t, "Break\n")
	print(text) ; text is now modified ;
	print("\n")

	local text = dup("")
	local arr = dup([])
	insert(text, "hello")
	insert(arr, "hey", "bye")

	print("array: [")
	for i to length(arr) {
		if not(equals(i, 0)) print(",")
		print(" ", get(arr, i))
	}
	print(" ]\n")

	print("again: [")
	local b = bool false
	for i in arr {
		if b print(",")
		print(" ", i)
		b = bool true
	}
	print(" ]\n")

	print("text bytes: ")
	for i from 0 to length(text) {
		if not(equals(i, 0)) print(", ")
		print(get(text, i))
	}
	print("\n")

	print("again: ")
	for c in text print(c, " ") print("\n")
}

main = function {
	test()
	return 0
}

Button:
	:background = color 0x60609f
	:away = color red
	:shadow = color red
	:outline = color 0x5b1200
	:text = color green
	:press = color brown
	:hover = color yellow
	:is_hovered = bool false
	:is_pressed = bool false
	:has_spawned = bool false
	:circular = bool true
	:font = int 0

	:init = function {
	}
	:draw = function {
		local c = color 0
		if is_pressed {
			if is_hovered {
				c = press
			} else {
				c = away
			}
		} else {
			if is_hovered {
				c = hover
			} else {
				c = background
			}
		}
		if has_spawned {
			c = rand(0, 100000)
		}
		SetDrawColor(c)
		FillRect(GetRect(this))
	}
	:event = function event e {
		if equals(GetType(e), const EVENT_MOUSEMOVE) {
			if Contains(GetRect(this), GetPos(e)) {
				is_hovered = bool true
			} else {
				is_hovered = bool false
			}
		} else if equals(GetType(e), const EVENT_BUTTONDOWN) {
			if equals(GetButton(e), const BUTTON_LEFT) {
				; testing property functions ;
				SetProperty(this, "is_pressed", GetProperty(this, "is_hovered"))
				;is_pressed = is_hovered;
			}
		} else if equals(GetType(e), const EVENT_BUTTONUP) {
			if and(is_pressed, is_hovered, not(has_spawned)) {
				local b = CreateView("Button")
				SetRect(b, rand(0, GetWindowWidth()),
					rand(0, GetWindowHeight()), 30, 30)
				SetParent(b, GetParent(this))
				has_spawned = bool true
			}
			is_pressed = bool false
		}
	}
